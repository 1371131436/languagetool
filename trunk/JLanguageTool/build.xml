<?xml version="1.0"?>

<project name="LanguageTool" default="dist" basedir=".">

  <property name="version" value="0.8.5dev"/>
  <property name="date" value="2006-xx-yy"/>
	
  <property name="javadoctitle" value="LanguageTool API ${version}"/>
  
  <property file="build.properties"/>

  <taskdef classpath="${ext.cobertura.lib}" resource="tasks.properties"/>

  <path id="common.classpath">
    <pathelement location="${ext.stempelator.lib}"/>
    <pathelement location="${ext.jdic.lib}"/>
    <pathelement location="${ext.jaminid.lib}"/>
  	<!-- -->
    <pathelement location="${ext.ooo.juh.lib}"/>
    <pathelement location="${ext.ooo.unoil.lib}"/>
    <pathelement location="${ext.ooo.ridl.lib}"/>
    <pathelement location="${ext.ooo.jurt.lib}"/>
	<!-- -->
  </path>

  <path id="classpath">
  	<path refid="common.classpath"/>
    <pathelement location="${build.classes}"/>
  </path>

  <path id="ooo.classpath">
    <path refid="common.classpath"/>
    <pathelement location="${ext.ooo.juh.lib}"/>
    <pathelement location="${ext.ooo.unoil.lib}"/>
    <pathelement location="${ext.ooo.ridl.lib}"/>
    <pathelement location="${ext.ooo.jurt.lib}"/>
    <pathelement location="${dist.dir}/${final.name}.jar"/>
    <pathelement path="${java.class.path}"/>
  </path>

  <path id="junit.classpath">
  	<path refid="common.classpath"/>
    <pathelement location="${ext.junit.lib}"/>
    <pathelement location="${dist.dir}/${final.name}.jar"/>
    <pathelement path="${java.class.path}"/>
  </path>

  <!-- ================================================================== -->
  <!-- CLEAN -->
  <!-- ================================================================== -->
  <target name="clean">
    <delete dir="${test.dir}"/>
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete dir="${junit.classes.dir}"/>
  </target>

  <!-- ================================================================== -->
  <!-- Prepares the build & dist directory -->
  <!-- ================================================================== -->
  <target name="init">
  	<echo>${ant.version}</echo>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.meta-inf}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/linux"/>
    <mkdir dir="${dist.dir}/windows"/>
    <mkdir dir="${dist.dir}/sunos"/>
  </target>

  <!-- ================================================================== -->
  <!-- TEST -->
  <!-- ================================================================== -->

  <target name="test" depends="clean,init,build" description="Runs unit tests">

	<mkdir dir="${junit.classes.dir}"/>
	<mkdir dir="${dist.dir}/report/tests"/>

	<javac encoding="${encoding}"
		srcdir="${src.test.dir}"
		includes="**/*Test.java"
		destdir="${junit.classes.dir}"
		debug="${debug}">
			<classpath refid="junit.classpath"/>
   	</javac>

	<!-- make sure that no classes where left in the build directory, clean it up -->
	<delete dir="${build.dir}"/>
	
	<path id="test.classpath">
		<pathelement location="${ext.junit.lib}"/>
		<pathelement location="${junit.classes.dir}"/>
		<pathelement location="${dist.dir}/${final.name}.jar"/>
	  	<path refid="common.classpath"/>
	</path>
	
  	<junit printsummary="true"
           errorproperty="tests.failed"
           showoutput="true"
           fork="yes">
	  
      <formatter type="brief" usefile="false"/>
      <classpath refid="test.classpath"/>
      
	  <batchtest fork="yes" todir="${dist.dir}/report/tests" unless="testcase" haltonfailure="yes">
		<fileset dir="${src.test.dir}" includes="**/*Test.java" />
	  </batchtest>
      <batchtest fork="yes" todir="${dist.dir}/report/tests" if="testcase" haltonfailure="yes">
		<fileset dir="${src.test.dir}" includes="**/${testcase}.java"/>
	  </batchtest>		
		
	</junit>

    <fail if="tests.failed">Tests failed!</fail>

  </target>

  <!-- ================================================================== -->

  <target name="test-coverage" depends="clean,init,dist" description="Checks unit test coverage">
  	
  	<echo>##### NOTE: log4j needs to be added to CLASSPATH manually! #####</echo>

	<mkdir dir="${junit.classes.dir}"/>
	<mkdir dir="${dist.dir}/report/tests"/>

	<javac encoding="${encoding}"
		srcdir="${src.test.dir}"
		includes="**/*Test.java"
		destdir="${junit.classes.dir}"
		debug="${debug}">
			<classpath refid="junit.classpath"/>
   	</javac>
	<javac encoding="${encoding}"
		srcdir="${src.java.dir}"
		includes="**/*.java"
		destdir="${junit.classes.dir}"
		debug="${debug}">
			<classpath refid="junit.classpath"/>
   	</javac>
  	<copy todir="${junit.classes.dir}/de/danielnaber/languagetool/">
	  	<fileset dir="${src.java.dir}/de/danielnaber/languagetool/">
	  		<include name="*.properties" />
	  	</fileset>
	</copy>

	<!-- make sure that no classes where left in the build directory, clean it up -->
	<delete dir="${build.dir}"/>
	
	<path id="test.classpath">
	  	<path refid="classpath"/>
		<pathelement location="${ext.junit.lib}"/>
		<pathelement location="${ext.cobertura.lib}"/>
		<pathelement location="${ext.jakarta-oro.lib}"/>
		<pathelement location="${ext.asm.lib}"/>
		<pathelement location="${ext.getopt.lib}"/>
		<pathelement location="${ext.ccl.lib}"/>
		<pathelement location="${ext.javancss.lib}"/>
		<pathelement location="${ext.log4j.lib}"/>
		<pathelement location="${junit.instrumented-classes.dir}"/>
		<pathelement location="${junit.classes.dir}"/>
	</path>
	
	<cobertura-instrument todir="${junit.instrumented-classes.dir}">
		<classpath refid="test.classpath"/>
	    <fileset dir="${junit.classes.dir}">
    	    <include name="**/*.class"/>
	    </fileset>
	</cobertura-instrument>

  	<junit printsummary="true"
           errorproperty="tests.failed"
           showoutput="true"
           fork="yes">
	  
      <formatter type="brief" usefile="true"/>
      <formatter type="xml"/>
      <classpath refid="test.classpath"/>
      
	  <batchtest fork="yes" todir="${dist.dir}/report/tests" unless="testcase" haltonfailure="no">
		<fileset dir="${src.test.dir}" includes="**/*Test.java" />
	  </batchtest>
      <batchtest fork="yes" todir="${dist.dir}/report/tests" if="testcase" haltonfailure="yes">
		<fileset dir="${src.test.dir}" includes="**/${testcase}.java"/>
	  </batchtest>		
		
	</junit>

	<cobertura-report srcdir="${src.java.dir}" destdir="${dist.dir}/coverage">
		<classpath refid="test.classpath"/>
	</cobertura-report>
    <echo>
		coverage information can now be found in dist/coverage/index.html
    </echo>

    <fail if="tests.failed">Tests failed!</fail>

  </target>

  <!-- ================================================================== -->

  <target name="test-report" depends="" description="Creates unit test report">
    <junitreport todir="${dist.dir}/report">
      <fileset dir="${dist.dir}/report/tests">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${dist.dir}/report"/>
    </junitreport>
    <echo>
    	test report can now be found in dist/report/index.html
    </echo>
    <fail message="tests failed" if="junit.failed"/>
  </target>

  <!-- ================================================================== -->
  <!-- C O M P I L E                                        																		  -->
  <!-- ================================================================== -->
  <target name="compile">
  	
  	<mkdir dir="${build.classes}" />
  	
  	<javac encoding="${encoding}"
      srcdir="${src.java.dir}"
      includes="de/danielnaber/**/*.java"
  	  excludes="de/danielnaber/languagetool/dev/*.java,de/danielnaber/languagetool/openoffice/*.java"
      destdir="${build.classes}"
	  debug="${debug}">
      <classpath refid="classpath"/>
    </javac>

  </target>

  <!-- ================================================================== -->
  <!-- BUILD -->
  <!-- ================================================================== -->
  <target name="build" depends="compile">

  	<copy todir="${build.classes}/de/danielnaber/languagetool/">
	  	<fileset dir="${src.java.dir}/de/danielnaber/languagetool/">
	  		<include name="*.properties" />
	  	</fileset>
	</copy>

	<jar
		jarfile="${dist.dir}/${final.name}.jar"
		basedir="${build.classes}"
		excludes="**/*.java">
		<manifest>
			<attribute name="Main-Class" value="de.danielnaber.languagetool.Main" />
			<attribute name="Class-Path" value="./maxent-2.4.0.jar ./opennlp-tools-1.3.0.jar ./trove.jar stempelator-nodict-1.0.3.jar ./jdic.jar ./jaminid.jar" />
		</manifest>
	</jar>

	<jar
		jarfile="${dist.dir}/${final.name.gui}.jar"
		basedir="${build.classes}"
		includes="de/danielnaber/languagetool/gui/*.class">
		<manifest>
			<attribute name="Main-Class" value="de.danielnaber.languagetool.gui.Main" />
			<attribute name="Class-Path" value="./LanguageTool.jar ./maxent-2.4.0.jar stempelator-nodict-1.0.3.jar ./opennlp-tools-1.3.0.jar ./trove.jar ./jdic.jar ./jaminid.jar" />
		</manifest>
	</jar>

  </target>
 
  <!-- ================================================================== -->
  <!-- JAVADOC -->
  <!-- ================================================================== -->
  <target name="javadoc" depends="compile">
  	<javadoc
           destdir="${dist.javadocs}"
           author="true"
           version="true"
           use="true"
           access="public"
           noqualifier="all"
  		   encoding="${encoding}"
           windowtitle="${javadoctitle}">

		<classpath>
			<pathelement location="${build.classes}"/>
			<fileset dir="${ext.dir}">
				<include name="*.jar" />
			</fileset>
	 	</classpath>
	
		<fileset dir="${src.java.dir}" defaultexcludes="no">
			<include name="**/*.java" />
		</fileset>
	
		<doctitle><![CDATA[<h1>${javadoctitle}</h1>]]></doctitle>
		<bottom><![CDATA[<i>Copyright &#169; 2005,2006 <a href="http://www.danielnaber.de" target="_top">Daniel Naber</a></i>]]></bottom>
		<link offline="true" href="http://java.sun.com/products/jdk/1.4/docs/api/" packagelistLoc="/tmp"/>
  	</javadoc>
  	<echo>javadoc output can now be found in dist/docs/api/index.html</echo>
  </target>

  <!-- ================================================================== -->
  <!-- OpenOffice.org compile -->
  <!-- ================================================================== -->
  <target name="ooo-compile">
  	<javac encoding="${encoding}"
      srcdir="${src.java.dir}"
	  includes="**/*.java"
	  excludes="de/danielnaber/languagetool/dev/*.java"
      destdir="${build.classes}"
  	  debug="${debug}">
      <classpath refid="ooo.classpath"/>
    </javac>
  	<copy todir="${build.classes}/de/danielnaber/languagetool/">
	  	<fileset dir="${src.java.dir}/de/danielnaber/languagetool/">
	  		<include name="*.properties" />
	  	</fileset>
	</copy>
  </target>

  <!-- ================================================================== -->
  <!-- OpenOffice.org compile -->
  <!-- ================================================================== -->
  <target name="ooo-build" depends="ooo-compile">
  	<jar
		jarfile="${dist.dir}/LanguageTool.uno.jar"
		basedir="${build.classes}"
		includes="de/danielnaber/languagetool/**/*.class,de/danielnaber/languagetool/**/*.properties">
  		<manifest>
		  	<attribute name="RegistrationClassName" value="de.danielnaber.languagetool.openoffice.Main" />
  		</manifest>
	</jar>
  </target>

  <!-- ================================================================== -->
  <!-- DIST-SRC -->
  <!-- ================================================================== -->
  <target name="dist-src" depends="ooo-internal" description="Like dist, but includes source code">
  	<antcall target="javadoc"></antcall>
  	<copy file="build.xml" todir="${dist.dir}" />
  	<copy file="build.properties" todir="${dist.dir}" />
  	<copy file="openoffice/Addons.xcu" todir="${dist.dir}/openoffice" />
  	<copy todir="${dist.dir}/openoffice/META-INF">
	  	<fileset dir="openoffice/META-INF" excludes="CVS" />
	</copy>
  	<copy todir="${dist.dir}/openoffice/images">
	  	<fileset dir="openoffice/images" excludes="CVS" />
	</copy>
  	<copy todir="${dist.dir}/libs">
	  	<fileset dir="libs" excludes="CVS,build" />
	</copy>
  	<copy todir="${dist.dir}/src">
	  	<fileset dir="src" excludes="CVS" />
	</copy>
  	<zip compress="yes" destfile="${dist.dir}/LanguageTool-${version}-src.zip"
  		basedir="${dist.dir}"
  		includes="**" excludes="turn.sh,deploy.sh,undeploy.sh,jdic.jar,linux/**,windows/**,sunos/**,standalone-libs.zip" />
  </target>

  <!-- ================================================================== -->
  <!-- LanguageTool including OpenOffice.org integration -->
  <!-- ================================================================== -->
	
  <target name="dist" depends="ooo-internal" description="Builds one ZIP for both OpenOffice.org and stand-alone use">
  	<copy file="${resource.dir}/TrayIcon.png" todir="${dist.dir}/resource/" />
  	<zip compress="yes" destfile="${dist.dir}/LanguageTool-${version}.zip"
  		basedir="${dist.dir}"
  		includes="**"
  		excludes="deploy.sh,undeploy.sh,turn.sh,jdic.jar,linux/**,windows/**,sunos/**" />
  </target>

  <target name="fast" depends="ooo-internal" description="like dist, but without ZIP compression (for development only)">
  	<zip compress="no" destfile="${dist.dir}/LanguageTool-${version}.zip"
  		basedir="${dist.dir}"
  		includes="**" 
  		excludes="deploy.sh,undeploy.sh,turn.sh,jdic.jar,linux/**,windows/**,sunos/**" />
  </target>

  <target name="ooo-internal" depends="clean,init,build,ooo-build">
  	<copy todir="${dist.dir}/">
	  	<fileset dir="openoffice/" includes="Addons.xcu,images/**,META-INF/**" />
	</copy>
  	<copy todir="${dist.dir}/rules">
	  	<fileset dir="rules" excludes="CVS" />
	</copy>

	<copy file="./standalone-libs.zip" todir="${dist.dir}" />
	<copy file="./README.txt" todir="${dist.dir}" />
	<copy file="./CHANGES.txt" todir="${dist.dir}" />
	<copy file="./COPYING.txt" todir="${dist.dir}" />
  	<replace file="${dist.dir}/README.txt" token="###VERSION###" value="${version}"></replace>
  	<replace file="${dist.dir}/README.txt" token="###DATE###" value="${date}"></replace>
  	<copy file="${ext.dir}/LGPL.txt" todir="${dist.dir}" />
  	<copy file="${ext.dir}/Apache-License.txt" todir="${dist.dir}" />
  	<copy file="${ext.dir}/README" tofile="${dist.dir}/README-license.txt" />
  		
	<copy file="${ext.stempelator.lib}" todir="${dist.dir}" />
	<copy file="${ext.jdic.lib}" todir="${dist.dir}" />
	<copy file="${ext.jaminid.lib}" todir="${dist.dir}" />
  
 	<copy todir="${dist.dir}/linux">
 		  	<fileset dir="${ext.dir}/linux"/>
	</copy>
 	<copy todir="${dist.dir}/windows">
   		  	<fileset dir="${ext.dir}/windows"/>
 	</copy>
 	<copy todir="${dist.dir}/sunos">
   		  	<fileset dir="${ext.dir}/sunos"/>
 	</copy>

 	<copy file="${resource.dir}/en/tagset.txt" todir="${dist.dir}/resource/en" />
	<copy file="${resource.dir}/en/english.dict" todir="${dist.dir}/resource/en" />
 	<copy file="${resource.dir}/fr/french.dict" todir="${dist.dir}/resource/fr" />
 	<copy file="${resource.dir}/fr/readme.txt" todir="${dist.dir}/resource/fr" />
  <copy file="${resource.dir}/es/spanish.dict" todir="${dist.dir}/resource/es" />
  <copy file="${resource.dir}/es/etiquetas-eagles.txt" todir="${dist.dir}/resource/es" />  	
	<copy file="${resource.dir}/de/german.dict" todir="${dist.dir}/resource/de" />
	<copy file="${resource.dir}/pl/polish.dict" todir="${dist.dir}/resource/pl" />
  </target>

  <target name="dict-de" description="Build the German tagger dictionary from Morphy data">
  	<exec executable="resource/de/make-dict-de.sh" />
  </target>
	
</project>