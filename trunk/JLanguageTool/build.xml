<?xml version="1.0"?>

<project name="LanguageTool" default="dist" basedir=".">

    <tstamp>
        <format property="date" pattern="yyyy-MM-dd" />
    </tstamp>

    <property file="build.properties" />

    <property name="javadoctitle" value="LanguageTool API ${version}" />

    <taskdef classpath="${ext.cobertura.lib}" resource="tasks.properties" />

    <path id="common.classpath">
        <pathelement location="${ext.morfologik.fsa.lib}" />
        <pathelement location="${ext.morfologik.stemming.lib}" />
        <pathelement location="${ext.morfologik.speller.lib}" />
        <pathelement location="${ext.jwordsplitter.lib}" />
        <pathelement location="${ext.logging.lib}" />
        <pathelement location="${ext.commons.lang.lib}" />
        <pathelement location="${ext.bliki.lib}" />
        <pathelement location="${ext.lucene-test-framework.lib}" />  <!-- must come before lucene-core -->
        <pathelement location="${ext.lucene-core.lib}" />
        <pathelement location="${ext.lucene-queries.lib}" />
        <pathelement location="${ext.lucene-analyzers.lib}" />
        <pathelement location="${ext.lucene-sandbox.lib}" />
        <pathelement location="${ext.lucene-random-testing.lib}" />
        <pathelement location="${ext.segment.lib}" />
        <!-- -->
        <pathelement location="${ext.ictclas4j.lib}" />
        <pathelement location="${ext.CJFtransform.lib}" />
        <pathelement location="${ext.commons-validator.lib}" />
    	<pathelement location="${ext.lucene-gosen.lib}"/>
        <!-- -->
        <pathelement location="${ext.ooo.juh.lib}" />
        <pathelement location="${ext.ooo.unoil.lib}" />
        <pathelement location="${ext.ooo.ridl.lib}" />
        <pathelement location="${ext.ooo.jurt.lib}" />
        <!-- -->
        <pathelement location="${resource.dir}/resource" />
        <pathelement location="${rules.dir}" />
        <pathelement location="src/main/resources" />
        <!-- tika lib -->
        <pathelement location="${ext.tika.lib}" />
        <!-- JNA-->
        <pathelement location="${ext.jna.lib}" />
        <!-- -->
        <pathelement location="${ext.xmlsyntax.lib}" />
        <pathelement location="${ext.sweble.engine}" />
        <pathelement location="${ext.sweble.parser}" />
        <!-- TODO: needed for tests, does not really belong here: -->
        <pathelement location="${src.java.dev.dir}" />
    </path>

    <path id="classpath">
        <path refid="common.classpath" />
        <pathelement location="${build.classes}" />
    </path>

    <path id="ooo.classpath">
        <path refid="common.classpath" />
        <pathelement location="${ext.ooo.juh.lib}" />
        <pathelement location="${ext.ooo.unoil.lib}" />
        <pathelement location="${ext.ooo.ridl.lib}" />
        <pathelement location="${ext.ooo.jurt.lib}" />
        <pathelement location="${dist.dir}/${final.name}.jar" />
        <pathelement path="${java.class.path}" />
    </path>

    <path id="junit.classpath">
        <path refid="common.classpath" />
        <pathelement location="${ext.junit.lib}" />
        <pathelement location="${dist.dir}/${final.name}.jar" />
        <pathelement location="${dist.dir}/LanguageTool.uno.jar" />
        <pathelement path="${java.class.path}" />
    </path>

    <path id="test.classpath">
        <path refid="junit.classpath" />
        <pathelement location="${build.classes}" />
    </path>

    <!-- ================================================================== -->
    <!-- Source without external libs -->
    <!-- ================================================================== -->
    <target name="dist-tgz" depends="clean"
            description="Pack the source code without external libraries (e.g. for Debian packaging)">
        <mkdir dir="${dist.dir}" />
        <tar destfile="${dist.dir}/LanguageTool-${version}-src.tar.gz" compression="gzip">
            <tarfileset prefix="LanguageTool-${version}" dir=".">
                <include name="src/**"/>
                <include name="README.txt"/>
                <include name="CHANGES.txt"/>
                <include name="COPYING.txt"/>
                <include name="build.properties"/>
                <include name="build.xml"/>
                <include name="openoffice/Addons.xcu"/>
                <include name="openoffice/help/**"/>
                <include name="openoffice/Linguistic.xcu"/>
                <include name="openoffice/description.xml"/>
                <include name="openoffice/images/dialog.png"/>
                <include name="openoffice/images/LanguageToolBig.png"/>
                <include name="ooolocales.properties"/>
                <exclude name="**/CVS/**"/>
            </tarfileset>
        </tar>
    </target>

    <!-- ================================================================== -->
    <!-- CLEAN -->
    <!-- ================================================================== -->
    <target name="clean">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${junit.classes.dir}" />
    </target>

    <!-- ================================================================== -->
    <!-- Prepares the build & dist directory -->
    <!-- ================================================================== -->
    <target name="init">
        <echo>${ant.version}</echo>
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.classes}" />
        <mkdir dir="${build.meta-inf}" />
        <mkdir dir="${dist.dir}" />
    </target>

    <!-- ================================================================== -->
    <!-- Generate the "ignore.txt" files -->
    <!-- ================================================================== -->
    <target name="generate-ignore-files" depends="clean,init,build" description="Re-create ignore.txt files for all languages">
        <java classname="org.languagetool.rules.spelling.SuggestionExtractor" fork="true"
              classpath="${build.classes}:src:${ext.dir}/native-lib" classpathref="common.classpath"/>
    </target>

    <!-- ================================================================== -->
    <!-- TEST -->
    <!-- ================================================================== -->

    <target name="test" description="Runs unit tests, stopping on failure">
        <property name="haltonfailure" value="yes"/>
        <antcall target="test-internal"/>
    </target>

    <target name="test-failfast" description="Runs unit tests, stopping on failure (same as 'test')">
        <antcall target="test"/>
    </target>

    <target name="test-failslow" description="Runs unit tests, not immediately stopping on failure">
        <property name="haltonfailure" value="no"/>
        <antcall target="test-internal"/>
    </target>

    <target name="test-rules" description="Runs unit tests for the pattern rules only">
        <property name="testcasePattern" value="**/ValidateXMLTest.java,**/PatternRuleTest.java"/>
        <antcall target="test"/>
    </target>

    <target name="test-hunspell-libs">
        <echo>Testing versions of hunspell libraries (Windows only)...</echo>
        <exec failonerror="false" resultproperty="return.code" os="Windows XP Windows Vista Windows 7" dir="${src.java.dev.dir}/tools"
              outputproperty="return.message"
              executable="cscript">
            <arg value="/nologo"/>
            <arg value="VersionInfo.js"/>
        </exec>
        <fail message="${return.message}">
            <condition>
                <equals arg1="-1" arg2="${return.code}"/>
            </condition>
        </fail>
    </target>

    <target name="test-internal" depends="clean,init,test-hunspell-libs,build,ooo-build" description="Runs unit tests">

        <mkdir dir="${junit.classes.dir}" />
        <mkdir dir="${dist.dir}/report/tests" />

        <javac includeAntRuntime="false" encoding="${encoding}" srcdir="${src.test.dir}" includes="**/*Test.java" destdir="${junit.classes.dir}" source="${source}" target="${target}" debug="${debug}">
            <classpath refid="junit.classpath" />
        </javac>

        <!-- make sure that no classes were left in the build directory, clean it up -->
        <delete dir="${build.dir}" />

        <path id="test.classpath">
            <pathelement location="${src.dir}" />
            <pathelement location="${ext.junit.lib}" />
            <pathelement location="${junit.classes.dir}" />
            <pathelement location="${dist.dir}/LanguageTool.uno.jar" />
            <pathelement location="${src.test.dir}" />
            <pathelement location="${ext.dir}/native-lib" />
            <pathelement location="src/test/resources" />
            <path refid="common.classpath" />
        </path>

        <junit printsummary="true" failureproperty="tests.failed" showoutput="true" maxmemory="250M" fork="yes" forkmode="once" haltonfailure="${haltonfailure}">

            <assertions>
                <enable/>
            </assertions>

            <formatter type="xml" usefile="true" />
            <formatter type="brief" usefile="false" />
            <classpath refid="test.classpath" />

            <batchtest fork="yes" todir="${dist.dir}/report/tests" unless="testcasePattern" haltonfailure="${haltonfailure}">
                <fileset dir="${src.test.dir}" includes="**/*Test.java" />
            </batchtest>
            <batchtest fork="yes" todir="${dist.dir}/report/tests" if="testcasePattern" haltonfailure="${haltonfailure}">
                <fileset dir="${src.test.dir}" includes="${testcasePattern}" />
            </batchtest>

        </junit>

        <fail if="tests.failed">Tests failed!</fail>

    </target>

    <!-- ================================================================== -->

    <target name="test-coverage" depends="clean,init,dist" description="Checks unit test coverage (needs cobertura manually copied to libs/build/cobertura/)">

        <echo>##### NOTE: log4j needs to be added to CLASSPATH manually! #####</echo>

        <mkdir dir="${junit.classes.dir}" />
        <mkdir dir="${dist.dir}/report/tests" />

        <javac includeAntRuntime="false" encoding="${encoding}" srcdir="${src.test.dir}" includes="**/*Test.java,**/XMLValidator.java,**/TestTools.java" destdir="${junit.classes.dir}" source="${source}" target="${target}" debug="${debug}">
            <classpath refid="junit.classpath" />
        </javac>
        <javac includeAntRuntime="false" encoding="${encoding}" srcdir="${src.java.dir}" includes="**/*.java" destdir="${junit.classes.dir}" source="${source}" target="${target}" debug="${debug}">
            <classpath refid="junit.classpath" />
        </javac>
        <copy todir="${junit.classes.dir}/org/languagetool/">
            <fileset dir="${resource.dir}/org/languagetool/">
                <include name="*.properties" />
            </fileset>
            <fileset dir="${src.test.dir}/org/languagetool/">
                <include name="**/test-en.txt" />
            </fileset>
        </copy>

        <!-- make sure that no classes where left in the build directory, clean it up -->
        <delete dir="${build.dir}" />

        <path id="test.classpath">
            <path refid="classpath" />
            <path refid="common.classpath" />
            <pathelement location="${src.dir}" />
            <pathelement location="${ext.junit.lib}" />
            <pathelement location="${ext.cobertura.lib}" />
            <pathelement location="${ext.jakarta-oro.lib}" />
            <pathelement location="${ext.asm.lib}" />
            <pathelement location="${ext.asmtree.lib}" />
            <pathelement location="${ext.log4j.lib}" />
            <pathelement location="${junit.instrumented-classes.dir}" />
            <pathelement location="${junit.classes.dir}" />
        </path>

        <cobertura-instrument todir="${junit.instrumented-classes.dir}">
            <classpath refid="test.classpath" />
            <fileset dir="${junit.classes.dir}">
                <include name="**/*.class" />
            </fileset>
        </cobertura-instrument>

        <junit printsummary="true" errorproperty="tests.failed" showoutput="true" fork="yes" forkmode="once">

            <formatter type="brief" usefile="true" />
            <formatter type="xml" />
            <classpath refid="test.classpath" />

            <batchtest fork="yes" todir="${dist.dir}/report/tests" unless="testcasePattern" haltonfailure="no">
                <fileset dir="${src.test.dir}" includes="**/*Test.java" />
            </batchtest>
            <batchtest fork="yes" todir="${dist.dir}/report/tests" if="testcasePattern" haltonfailure="${haltonfailure}">
                <fileset dir="${src.test.dir}" includes="${testcasePattern}" />
            </batchtest>

        </junit>

        <cobertura-report srcdir="${src.java.dir}" destdir="${dist.dir}/coverage">
            <classpath refid="test.classpath" />
        </cobertura-report>
        <echo>
            coverage information can now be found in dist/coverage/index.html
        </echo>

        <fail if="tests.failed">Tests failed!</fail>

    </target>

    <!-- ================================================================== -->

    <target name="test-report" depends="" description="Creates unit test report">
        <junitreport todir="${dist.dir}/report">
            <fileset dir="${dist.dir}/report/tests">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${dist.dir}/report" />
        </junitreport>
        <echo>
            test report can now be found in dist/report/index.html
        </echo>
        <fail message="tests failed" if="junit.failed" />
    </target>

    <!-- ================================================================== -->
    <!-- C O M P I L E -->
    <!-- ================================================================== -->
    <target name="compile">

        <mkdir dir="${build.classes}" />

        <javac includeAntRuntime="false" encoding="${encoding}" srcdir="${src.java.dir}" includes="org/languagetool/**/*.java" excludes="org/languagetool/dev/**/*.java,org/languagetool/openoffice/*.java" destdir="${build.classes}" source="${source}" target="${target}" debug="${debug}">
            <classpath refid="classpath" />
        </javac>
        <javac includeAntRuntime="false" encoding="${encoding}" srcdir="${src.java.dev.dir}" includes="org/languagetool/dev/**/*.java" destdir="${build.classes}" source="${source}" target="${target}" debug="${debug}">
            <classpath refid="classpath" />
        </javac>
        <javac includeAntRuntime="false" encoding="${encoding}" srcdir="${src.test.dir}" includes="org/languagetool/rules/patterns/PatternRuleTest.java
		org/languagetool/tagging/disambiguation/rules/DisambiguationRuleTest.java
		org/languagetool/rules/bitext/BitextPatternRuleTest.java
		org/languagetool/ValidateXMLTest.java
  		org/languagetool/XMLValidator.java" destdir="${build.classes}" source="${source}" target="${target}" debug="${debug}">
            <classpath refid="test.classpath" />
        </javac>

    </target>

    <!-- ================================================================== -->
    <!-- BUILD -->
    <!-- ================================================================== -->
    <target name="build" depends="compile">

        <copy todir="${build.classes}/org/languagetool/">
            <fileset dir="${resource.dir}/org/languagetool/">
                <include name="*.properties" />
            </fileset>
        </copy>

        <jar jarfile="${dist.dir}/${final.name}.jar" basedir="${build.classes}" excludes="**/*.java">
            <manifest>
                <attribute name="Main-Class" value="org.languagetool.Main" />
                <attribute name="Class-Path" value="./ ./rules ./resource ./${morfologik.fsa.lib} ./${morfologik.stemming.lib} ./${morfologik.speller.lib} ./jWordSplitter.jar ./${segment.lib} ./${logging.lib} ./${tika.lib} ./${ictclas4j.lib} ./${lucene-gosen.lib} ./${CJFtransform.lib} ./${commons-validator.lib} ./${commons.lang.lib} ./${jna.lib}" />
                <attribute name="Implementation-Version" value="${version}" />
                <attribute name="Implementation-Date" value="${date}" />
            </manifest>
        </jar>

        <jar jarfile="${dist.dir}/${final.name.gui}.jar" basedir="${build.classes}" includes="org/languagetool/gui/*.class">
            <manifest>
                <attribute name="Main-Class" value="org.languagetool.gui.Main" />
                <attribute name="Class-Path" value="./LanguageTool.jar ./ ./resource ./rules ./${morfologik.fsa.lib} ./${morfologik.stemming.lib} ./${morfologik.speller.lib} ./jWordSplitter.jar ./${segment.lib} ./${logging.lib} ./${tika.lib} ./${ictclas4j.lib} ././${lucene-gosen.lib} ./${CJFtransform.lib} ./${commons-validator.lib} ./${commons.lang.lib} ./${jna.lib}" />
                <attribute name="Implementation-Version" value="${version}" />
                <attribute name="Implementation-Date" value="${date}" />
            </manifest>
        </jar>

        <jar jarfile="${dist.dir}/${converter.name}.jar" basedir="${build.classes}" includes="org/languagetool/dev/conversion/*.class">
            <manifest>
                <attribute name="Main-Class" value="org.languagetool.dev.conversion.RuleConverterMain" />
                <attribute name="Class-Path" value="./ ./rules ./resource ./${final.name}.jar" />
                <attribute name="Implementation-Version" value="${version}" />
                <attribute name="Implementation-Date" value="${date}" />
            </manifest>
        </jar>

        <jar jarfile="${dist.dir}/RuleConverterGUI.jar" basedir="${build.classes}" includes="org/languagetool/dev/conversion/*.class">
            <manifest>
                <attribute name="Main-Class" value="org.languagetool.dev.conversion.gui.Main" />
                <attribute name="Class-Path" value="./ ./rules ./resource ./${final.name}.jar ./${xmlsyntax.lib}" />
                <attribute name="Implementation-Version" value="${version}" />
                <attribute name="Implementation-Date" value="${date}" />
            </manifest>
        </jar>


    </target>

    <!-- ================================================================== -->
    <!-- JAVADOC -->
    <!-- ================================================================== -->
    <target name="javadoc" depends="compile" description="Generate Javadoc API description">
        <javadoc destdir="${dist.javadocs}" author="true" version="true" use="true" access="public" noqualifier="all" encoding="${encoding}" windowtitle="${javadoctitle}">

            <classpath>
                <pathelement location="${build.classes}" />
                <fileset dir="${ext.dir}">
                    <include name="*.jar" />
                </fileset>
            </classpath>

            <fileset dir="${src.java.dir}" defaultexcludes="no">
                <include name="**/*.java" />
            </fileset>

            <doctitle>
                <![CDATA[<h1>${javadoctitle}</h1>]]></doctitle>
            <bottom>
                <![CDATA[<i>Copyright &#169; 2005-2012 <a href="http://www.danielnaber.de" target="_top">Daniel Naber</a>
		</i>]]></bottom>
            <link offline="true" href="http://java.sun.com/products/jdk/1.4/docs/api/" packagelistLoc="/tmp" />
        </javadoc>
        <echo>javadoc output can now be found in dist/docs/api/index.html</echo>
    </target>

    <!-- ================================================================== -->
    <!-- OpenOffice.org compile -->
    <!-- ================================================================== -->
    <target name="ooo-compile">
        <javac includeAntRuntime="false" encoding="${encoding}" srcdir="${src.java.dir}" includes="**/*.java" excludes="org/languagetool/dev/*.java" destdir="${build.classes}" source="${source}" target="${target}" debug="${debug}">
            <classpath refid="ooo.classpath" />
        </javac>
        <copy todir="${build.classes}/org/languagetool/">
            <fileset dir="${resource.dir}/org/languagetool/">
                <include name="*.properties" />
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- OpenOffice.org compile -->
    <!-- ================================================================== -->
    <target name="ooo-build" depends="ooo-compile">
        <jar jarfile="${dist.dir}/LanguageTool.uno.jar" basedir="${build.classes}" includes="org/languagetool/**/*.class,org/languagetool/**/*.properties">
            <manifest>
                <attribute name="RegistrationClassName" value="org.languagetool.openoffice.Main" />
                <attribute name="Implementation-Version" value="${version}" />
                <attribute name="Implementation-Date" value="${date}" />
                <attribute name="Class-Path" value=". ./rules ./resource ./${morfologik.fsa.lib} ./${morfologik.stemming.lib} ./jWordSplitter.jar ./${segment.lib} ./${logging.lib} ./${tika.lib} ./${ictclas4j.lib} ./${CJFtransform.lib} ./${lucene-gosen.lib} ./${commons-validator.lib} ${commons.lang.lib}" />
                <attribute name="Uno-Type-Path" value="" />
            </manifest>
        </jar>
    </target>

    <!-- ================================================================== -->
    <!-- DIST-SRC -->
    <!-- ================================================================== -->
    <target name="dist-src" depends="ooo-internal" description="Like dist, but includes source code">
        <antcall target="javadoc">
        </antcall>
        <copy file="build.xml" todir="${dist.dir}" />
        <copy file="build.properties" todir="${dist.dir}" />
        <copy file="openoffice/Addons.xcu" todir="${dist.dir}/openoffice" />
        <filter filtersFile="build.properties" />
        <copy filtering="true" todir="${dist.dir}/openoffice/META-INF">
            <fileset dir="openoffice/META-INF" excludes="CVS" />
        </copy>
        <copy todir="${dist.dir}/openoffice/images">
            <fileset dir="openoffice/images" excludes="CVS" />
        </copy>
        <copy todir="${dist.dir}/src">
            <fileset dir="src" excludes="CVS,resource/**,rules/**,scripts/**" />
        </copy>
        <copy file="openoffice/description.xml" todir="${dist.dir}/openoffice/" filtering="true" encoding="${encoding}" />
        <zip compress="yes" destfile="${dist.dir}/LanguageTool-${version}-src.zip" basedir="${dist.dir}" includes="**" excludes="turn.sh,deploy.sh,undeploy.sh" />
    </target>


    <!-- ========================================================================= -->
    <!-- LanguageTool standalone with hunspell, without OpenOffice.org integration -->
    <!-- ========================================================================= -->
    <target name="dist-standalone" depends="common" description="Builds a ZIP for stand-alone use">
        <zip compress="yes" destfile="${dist.dir}/LanguageTool-${version}.zip">
            <zipfileset prefix="LanguageTool" dir="${dist.dir}" excludes="deploy.sh,undeploy.sh,turn.sh,printlocales.jar,LanguageTool.uno.jar"/>
        </zip>
    </target>

    <!-- ================================================================== -->
    <!-- LanguageTool including OpenOffice.org integration -->
    <!-- ================================================================== -->
    <target name="dist" depends="ooo-internal" description="Builds LibreOffice/ApacheOpenOffice extension">
        <zip compress="yes" destfile="${dist.dir}/LanguageTool-${version}.oxt" basedir="${dist.dir}" includes="**"
             excludes="deploy.sh,undeploy.sh,turn.sh,printlocales.jar,**/hunspell/**,${bliki.lib},junit.jar,Rule*.jar,
               lucene-core*jar,lucene-sandbox*.jar,lucene-test*.jar,lucene-analyzers*.jar,lucene-queries*.jar,testwikipedia.*,LanguageTool.jar,
               LanguageToolGUI.jar,*.xsl,${jna.lib},hunspell-*.jnilib,hunspell-*.dll,libhunspell-*.so" />
    </target>

    <target name="fast" depends="ooo-internal" description="like dist, but without ZIP compression (for development only)">
        <zip compress="no" destfile="${dist.dir}/LanguageTool-${version}.oxt" basedir="${dist.dir}" includes="**"
             excludes="deploy.sh,undeploy.sh,turn.sh,printlocales.jar,**/hunspell/**,${bliki.lib},junit.jar,Rule*.jar,
               lucene-core*jar,lucene-sandbox*.jar,lucene-test*.jar,lucene-analyzers*.jar,lucene-queries*.jar,testwikipedia.*,LanguageTool.jar,
               LanguageToolGUI.jar,*.xsl,${jna.lib},hunspell-*.jnilib,hunspell-*.dll,libhunspell-*.so" />
    </target>

    <target name="common" depends="clean,init,build">
        <copy file="${resource.dir}/org/languagetool/resource/TrayIcon.png" todir="${dist.dir}/org/languagetool/resource" />
        <filter filtersFile="build.properties" />

        <copy file="./README.txt" todir="${dist.dir}" />
        <copy file="./CHANGES.txt" todir="${dist.dir}" />
        <copy file="./COPYING.txt" todir="${dist.dir}" />
        <replace file="${dist.dir}/README.txt" token="###VERSION###" value="${version}"></replace>
        <replace file="${dist.dir}/README.txt" token="###DATE###" value="${date}"></replace>
        <replace file="${dist.dir}/README.txt" token="###morfologik.lib###" value="${morfologik.fsa.lib}:${morfologik.stemming.lib}"></replace>
        <copy file="${ext.dir}/LGPL.txt" todir="${dist.dir}" />
        <copy file="${ext.dir}/Morfologik-license.txt" tofile="${dist.dir}/Morfologik-license.txt" />
        <copy file="${ext.dir}/CPL.txt" tofile="${dist.dir}/junit-license.txt" />
        <copy file="${ext.dir}/Apache-License.txt" tofile="${dist.dir}/jWordSplitter-license.txt" />
        <copy file="${ext.dir}/segment-license.txt" tofile="${dist.dir}/segment-license.txt" />
        <copy file="${ext.dir}/ictclas4j-license.txt" tofile="${dist.dir}/ictclas4j-license.txt" />    	

        <filter filtersFile="build.properties" />
        <copy file="${ext.dir}/README" tofile="${dist.dir}/README-license.txt" filtering="true" encoding="${encoding}" />

        <copy file="${ext.morfologik.fsa.lib}" todir="${dist.dir}" />
        <copy file="${ext.morfologik.stemming.lib}" todir="${dist.dir}" />
        <copy file="${ext.morfologik.speller.lib}" todir="${dist.dir}" />
        <copy file="${ext.jwordsplitter.lib}" todir="${dist.dir}" />
        <copy file="${ext.segment.lib}" todir="${dist.dir}" />
        <copy file="${ext.logging.lib}" todir="${dist.dir}" />
        <copy file="${ext.commons.lang.lib}" todir="${dist.dir}" />
        <copy file="${ext.bliki.lib}" todir="${dist.dir}" />
        <copy file="${ext.junit.lib}" todir="${dist.dir}" />
        <copy file="${ext.tika.lib}" todir="${dist.dir}" />
        <copy file="${ext.xmlsyntax.lib}" todir="${dist.dir}" />

        <copy file="${ext.ictclas4j.lib}" todir="${dist.dir}" />
        <copy file="${ext.CJFtransform.lib}" todir="${dist.dir}" />
    	<copy file="${ext.lucene-gosen.lib}" todir="${dist.dir}" />
        <copy file="${ext.commons-validator.lib}" todir="${dist.dir}" />
        <copy file="${ext.lucene-core.lib}" todir="${dist.dir}" />
        <copy file="${ext.lucene-queries.lib}" todir="${dist.dir}" />
        <copy file="${ext.lucene-analyzers.lib}" todir="${dist.dir}" />
        <copy file="${ext.lucene-sandbox.lib}" todir="${dist.dir}" />
        <copy file="${ext.jna.lib}" todir="${dist.dir}" />


        <copy file="${src.scripts.dir}/testrules.sh" todir="${dist.dir}" />
        <copy file="${src.scripts.dir}/testrules.bat" todir="${dist.dir}" />
        <copy file="${src.scripts.dir}/testwikipedia.sh" todir="${dist.dir}" />
        <copy file="${src.scripts.dir}/testwikipedia.bat" todir="${dist.dir}" />

        <copy file="${lang.resource.dir}/api-output.dtd" todir="${lang.dist.dir}" />
        <copy file="${lang.resource.dir}/disambiguation.xsd" todir="${lang.dist.dir}" />
        <copy file="${lang.resource.dir}/segment.srx" todir="${lang.dist.dir}" />

        <copy file="${lang.resource.dir}/ast/ast.ngp" todir="${lang.dist.dir}/ast" />

        <copy file="${lang.resource.dir}/be/be.ngp" todir="${lang.dist.dir}/be" />

        <copy file="${lang.resource.dir}/en/tagset.txt" todir="${lang.dist.dir}/en" />
        <copy file="${lang.resource.dir}/en/english.dict" todir="${lang.dist.dir}/en" />
        <copy file="${lang.resource.dir}/en/english.info" todir="${lang.dist.dir}/en" />
        <copy file="${lang.resource.dir}/en/english_synth.dict" todir="${lang.dist.dir}/en" />
        <copy file="${lang.resource.dir}/en/english_synth.info" todir="${lang.dist.dir}/en" />
        <copy file="${lang.resource.dir}/en/english_tags.txt" todir="${lang.dist.dir}/en" />
        <copy file="${lang.resource.dir}/en/disambiguation.xml" todir="${lang.dist.dir}/en" />
        <copy file="${lang.resource.dir}/en/compounds.txt" todir="${lang.dist.dir}/en" />

        <copy file="${lang.resource.dir}/tl/tagset.txt" todir="${lang.dist.dir}/tl" />
        <copy file="${lang.resource.dir}/tl/tagalog.dict" todir="${lang.dist.dir}/tl" />
        <copy file="${lang.resource.dir}/tl/tagalog.info" todir="${lang.dist.dir}/tl" />
        <copy file="${lang.resource.dir}/tl/README.txt" todir="${lang.dist.dir}/tl" />
        <copy file="${lang.resource.dir}/tl/tl.ngp" todir="${lang.dist.dir}/tl" />

        <copy file="${lang.resource.dir}/eo/etikedoj.txt" todir="${lang.dist.dir}/eo" />
        <copy file="${lang.resource.dir}/eo/manual-tagger.txt" todir="${lang.dist.dir}/eo" />
        <copy file="${lang.resource.dir}/eo/disambiguation.xml" todir="${lang.dist.dir}/eo" />
        <copy file="${lang.resource.dir}/eo/eo.ngp" todir="${lang.dist.dir}/eo" />

        <copy file="${lang.resource.dir}/it/italian.dict" todir="${lang.dist.dir}/it" />
        <copy file="${lang.resource.dir}/it/italian.info" todir="${lang.dist.dir}/it" />
        <copy file="${lang.resource.dir}/it/readme-morph-it.txt" todir="${lang.dist.dir}/it" />

        <copy file="${lang.resource.dir}/fr/french.dict" todir="${lang.dist.dir}/fr" />
        <copy file="${lang.resource.dir}/fr/french.info" todir="${lang.dist.dir}/fr" />
        <copy file="${lang.resource.dir}/fr/README_lexique.txt" todir="${lang.dist.dir}/fr" />
        <copy file="${lang.resource.dir}/fr/tagset.LT.txt" todir="${lang.dist.dir}/fr" />
        <copy file="${lang.resource.dir}/fr/multiwords.txt" todir="${lang.dist.dir}/fr" />
        <copy file="${lang.resource.dir}/fr/disambiguation.xml" todir="${lang.dist.dir}/fr" />

        <copy file="${lang.resource.dir}/br/breton.dict" todir="${lang.dist.dir}/br" />
        <copy file="${lang.resource.dir}/br/breton.info" todir="${lang.dist.dir}/br" />
        <copy file="${lang.resource.dir}/br/disambiguation.xml" todir="${lang.dist.dir}/br" />

        <copy file="${lang.resource.dir}/gl/galician.dict" todir="${lang.dist.dir}/gl" />
        <copy file="${lang.resource.dir}/gl/galician.info" todir="${lang.dist.dir}/gl" />
        <copy file="${lang.resource.dir}/gl/disambiguation.xml" todir="${lang.dist.dir}/gl" />
        <copy file="${lang.resource.dir}/gl/galician_tags.txt" todir="${lang.dist.dir}/gl" />
        <copy file="${lang.resource.dir}/gl/galician_synth.dict" todir="${lang.dist.dir}/gl" />
        <copy file="${lang.resource.dir}/gl/galician_synth.info" todir="${lang.dist.dir}/gl" />
        <copy file="${lang.resource.dir}/gl/README" todir="${lang.dist.dir}/gl" />
        <copy file="${lang.resource.dir}/gl/gl.ngp" todir="${lang.dist.dir}/gl" />

        <copy file="${lang.resource.dir}/es/spanish.dict" todir="${lang.dist.dir}/es" />
        <copy file="${lang.resource.dir}/es/spanish.info" todir="${lang.dist.dir}/es" />
        <copy file="${lang.resource.dir}/es/etiquetas-eagles.txt" todir="${lang.dist.dir}/es" />
        <copy file="${lang.resource.dir}/es/spanish_synth.dict" todir="${lang.dist.dir}/es" />
        <copy file="${lang.resource.dir}/es/spanish_synth.info" todir="${lang.dist.dir}/es" />
        <copy file="${lang.resource.dir}/es/spanish_tags.txt" todir="${lang.dist.dir}/es" />
        <copy file="${lang.resource.dir}/es/disambiguation.xml" todir="${lang.dist.dir}/es" />
        <copy file="${lang.resource.dir}/es/README" todir="${lang.dist.dir}/es" />

        <copy file="${lang.resource.dir}/da/danish_tags.txt" todir="${lang.dist.dir}/da" />
        <copy file="${lang.resource.dir}/da/danish.dict" todir="${lang.dist.dir}/da" />
        <copy file="${lang.resource.dir}/da/danish.info" todir="${lang.dist.dir}/da" />
        <copy file="${lang.resource.dir}/da/disambiguation.xml" todir="${lang.dist.dir}/da" />

        <copy file="${lang.resource.dir}/de/german.dict" todir="${lang.dist.dir}/de" />
        <copy file="${lang.resource.dir}/de/german.info" todir="${lang.dist.dir}/de" />
        <copy file="${lang.resource.dir}/de/compounds.txt" todir="${lang.dist.dir}/de" />
        <copy file="${lang.resource.dir}/de/added.txt" todir="${lang.dist.dir}/de" />
        <copy file="${lang.resource.dir}/de/tagset.txt" todir="${lang.dist.dir}/de" />

        <copy file="${lang.resource.dir}/pl/polish.dict" todir="${lang.dist.dir}/pl" />
        <copy file="${lang.resource.dir}/pl/polish.info" todir="${lang.dist.dir}/pl" />

        <copy file="${lang.resource.dir}/pl/polish_synth.dict" todir="${lang.dist.dir}/pl" />
        <copy file="${lang.resource.dir}/pl/polish_synth.info" todir="${lang.dist.dir}/pl" />
        <copy file="${lang.resource.dir}/pl/polish_tags.txt" todir="${lang.dist.dir}/pl" />
        <copy file="${lang.resource.dir}/pl/compounds.txt" todir="${lang.dist.dir}/pl" />
        <copy file="${lang.resource.dir}/pl/multiwords.txt" todir="${lang.dist.dir}/pl" />
        <copy file="${lang.resource.dir}/pl/disambiguation.xml" todir="${lang.dist.dir}/pl" />

        <copy file="${lang.resource.dir}/pt/compounds.txt" todir="${lang.dist.dir}/pt" />

        <copy file="${lang.resource.dir}/nl/dutch.dict" todir="${lang.dist.dir}/nl" />
        <copy file="${lang.resource.dir}/nl/dutch.info" todir="${lang.dist.dir}/nl" />
        <copy file="${lang.resource.dir}/nl/dutch_synth.dict" todir="${lang.dist.dir}/nl" />
        <copy file="${lang.resource.dir}/nl/dutch_synth.info" todir="${lang.dist.dir}/nl" />
        <copy file="${lang.resource.dir}/nl/dutch_tags.txt" todir="${lang.dist.dir}/nl" />
        <copy file="${lang.resource.dir}/nl/disambiguation.xml" todir="${lang.dist.dir}/nl" />

        <copy file="${lang.resource.dir}/sv/swedish.info" todir="${lang.dist.dir}/sv" />
        <copy file="${lang.resource.dir}/sv/swedish.dict" todir="${lang.dist.dir}/sv" />
        <copy file="${lang.resource.dir}/sv/compounds.txt" todir="${lang.dist.dir}/sv" />

        <copy file="${lang.resource.dir}/uk/ukrainian.dict" todir="${lang.dist.dir}/uk" />
        <copy file="${lang.resource.dir}/uk/ukrainian.info" todir="${lang.dist.dir}/uk" />
        <copy file="${lang.resource.dir}/uk/uk.ngp" todir="${lang.dist.dir}/uk" />

        <copy file="${lang.resource.dir}/ru/russian.dict" todir="${lang.dist.dir}/ru" />
        <copy file="${lang.resource.dir}/ru/russian.info" todir="${lang.dist.dir}/ru" />
        <copy file="${lang.resource.dir}/ru/russian_tags.txt" todir="${lang.dist.dir}/ru" />
        <copy file="${lang.resource.dir}/ru/russian_synth.dict" todir="${lang.dist.dir}/ru" />
        <copy file="${lang.resource.dir}/ru/russian_synth.info" todir="${lang.dist.dir}/ru" />
        <copy file="${lang.resource.dir}/ru/tags_russian.txt" todir="${lang.dist.dir}/ru" />
        <copy file="${lang.resource.dir}/ru/compounds.txt" todir="${lang.dist.dir}/ru" />
        <copy file="${lang.resource.dir}/ru/disambiguation.xml" todir="${lang.dist.dir}/ru" />
        <copy file="${lang.resource.dir}/ru/multiwords.txt" todir="${lang.dist.dir}/ru" />

        <copy file="${lang.resource.dir}/ro/romanian.dict" todir="${lang.dist.dir}/ro" />
        <copy file="${lang.resource.dir}/ro/romanian.info" todir="${lang.dist.dir}/ro" />
        <copy file="${lang.resource.dir}/ro/romanian_synth.dict" todir="${lang.dist.dir}/ro" />
        <copy file="${lang.resource.dir}/ro/romanian_synth.info" todir="${lang.dist.dir}/ro" />
        <copy file="${lang.resource.dir}/ro/romanian_tags.txt" todir="${lang.dist.dir}/ro" />
        <copy file="${lang.resource.dir}/ro/disambiguation.xml" todir="${lang.dist.dir}/ro" />
        <copy file="${lang.resource.dir}/ro/compounds.txt" todir="${lang.dist.dir}/ro" />
        <copy file="${lang.resource.dir}/ro/ro.ngp" todir="${lang.dist.dir}/ro" />
        <copy file="${lang.resource.dir}/ro/added.txt" todir="${lang.dist.dir}/ro" />

        <copy file="${lang.resource.dir}/sl/sl.ngp" todir="${lang.dist.dir}/sl" />

        <copy file="${lang.resource.dir}/sk/slovak.dict" todir="${lang.dist.dir}/sk" />
        <copy file="${lang.resource.dir}/sk/slovak.info" todir="${lang.dist.dir}/sk" />
        <copy file="${lang.resource.dir}/sk/compounds.txt" todir="${lang.dist.dir}/sk" />
        <copy file="${lang.resource.dir}/sk/README" todir="${lang.dist.dir}/sk" />
        <copy file="${lang.resource.dir}/sk/slovak_synth.dict" todir="${lang.dist.dir}/sk" />
        <copy file="${lang.resource.dir}/sk/slovak_synth.info" todir="${lang.dist.dir}/sk" />
        <copy file="${lang.resource.dir}/sk/slovak_tags.txt" todir="${lang.dist.dir}/sk" />
        <copy file="${lang.resource.dir}/sk/sk.ngp" todir="${lang.dist.dir}/sk" />

        <copy file="${lang.resource.dir}/ml/malayalam.dict" todir="${lang.dist.dir}/ml" />
        <copy file="${lang.resource.dir}/ml/malayalam.info" todir="${lang.dist.dir}/ml" />

        <copy file="${lang.resource.dir}/km/khmer.dict" todir="${lang.dist.dir}/km" />
        <copy file="${lang.resource.dir}/km/khmer.info" todir="${lang.dist.dir}/km" />
        <copy file="${lang.resource.dir}/km/khmertags.txt" todir="${lang.dist.dir}/km" />
        <copy file="${lang.resource.dir}/km/tagset.txt" todir="${lang.dist.dir}/km" />
        <copy file="${lang.resource.dir}/km/disambiguation.xml" todir="${lang.dist.dir}/km" />

        <copy file="${lang.resource.dir}/ca/catalan_synth.dict" todir="${lang.dist.dir}/ca" />
        <copy file="${lang.resource.dir}/ca/catalan_synth.info" todir="${lang.dist.dir}/ca" />
        <copy file="${lang.resource.dir}/ca/catalan_tags.txt" todir="${lang.dist.dir}/ca" />
        <copy file="${lang.resource.dir}/ca/catalan.dict" todir="${lang.dist.dir}/ca" />
        <copy file="${lang.resource.dir}/ca/catalan.info" todir="${lang.dist.dir}/ca" />
        <copy file="${lang.resource.dir}/ca/multiwords.txt" todir="${lang.dist.dir}/ca" />
        <copy file="${lang.resource.dir}/ca/disambiguation.xml" todir="${lang.dist.dir}/ca" />
        <copy file="${lang.resource.dir}/ca/README" todir="${lang.dist.dir}/ca" />
        <copy file="${lang.resource.dir}/ca/ca.ngp" todir="${lang.dist.dir}/ca" />
    	
    	<copy file="${lang.resource.dir}/ja/ja.ngp" todir="${lang.dist.dir}/ja" />

        <copy file="${lang.resource.dir}/zh/coreDict.dct" todir="${lang.dist.dir}/zh" />
        <copy file="${lang.resource.dir}/zh/BigramDict.dct" todir="${lang.dist.dir}/zh" />
        <copy file="${lang.resource.dir}/zh/nr.dct" todir="${lang.dist.dir}/zh" />
        <copy file="${lang.resource.dir}/zh/nr.ctx" todir="${lang.dist.dir}/zh" />
        <copy file="${lang.resource.dir}/zh/tr.dct" todir="${lang.dist.dir}/zh" />
        <copy file="${lang.resource.dir}/zh/tr.ctx" todir="${lang.dist.dir}/zh" />
        <copy file="${lang.resource.dir}/zh/ns.dct" todir="${lang.dist.dir}/zh" />
        <copy file="${lang.resource.dir}/zh/ns.ctx" todir="${lang.dist.dir}/zh" />
        <copy file="${lang.resource.dir}/zh/lexical.ctx" todir="${lang.dist.dir}/zh" />

        <copy file="${lang.resource.dir}/ast/asturian.dict" todir="${lang.dist.dir}/ast" />
        <copy file="${lang.resource.dir}/ast/asturian.info" todir="${lang.dist.dir}/ast" />

        <copy file="${lang.resource.dir}/el/el.dict" todir="${lang.dist.dir}/el" />
        <copy file="${lang.resource.dir}/el/el.info" todir="${lang.dist.dir}/el" />
        <copy file="${lang.resource.dir}/el/el_tags.txt" todir="${lang.dist.dir}/el" />
        <copy file="${lang.resource.dir}/el/el_synth.dict" todir="${lang.dist.dir}/el" />
        <copy file="${lang.resource.dir}/el/el_synth.info" todir="${lang.dist.dir}/el" />
        <copy file="${lang.resource.dir}/el/disambiguation.xml" todir="${lang.dist.dir}/el" />

        <copy file="${lang.resource.dir}/xx/dummy.dict" tofile="${lang.dist.dir}/cs/czech.dict" />
        <copy todir="${dist.dir}/org/languagetool/rules">
            <fileset dir="${rules.dir}" />
        </copy>

        <!-- general pattern for all hunspell-related files, including any license or readme files -->
        <copy todir="${lang.dist.dir}">
            <fileset dir="${lang.resource.dir}" includes="**/hunspell/*.*"/>
        </copy>
        <copy file="${ext.jna.lib}" todir="${dist.dir}" />
        <copy todir="${dist.dir}">
            <fileset dir="${ext.dir}/native-lib" />
        </copy>

    </target>

    <target name="ooo-internal" depends="common,ooo-build">
        <!-- prepare properties file automatically -->
        <javac includeAntRuntime="false" encoding="${encoding}" srcdir="${src.java.dev.dir}" includes="org/languagetool/dev/PrintLocales.java" destdir="${build.classes}" source="${source}" target="${target}" debug="${debug}">
        </javac>

        <jar jarfile="${dist.dir}/printlocales.jar" basedir="${build.classes}" includes="org/languagetool/dev/**">
            <manifest>
                <attribute name="Main-Class" value="org.languagetool.dev.PrintLocales" />
                <attribute name="Class-Path" value="./ ./LanguageTool.uno.jar ./${segment.lib} ./${logging.lib}" />
            </manifest>
        </jar>

        <touch file="ooolocales.properties"/>

        <chmod file="ooolocales.properties" perm="+w"/>

        <java jar="${dist.dir}/printlocales.jar" fork="true" />

        <delete file="${dist.dir}/printlocales.jar" />

        <filter filtersFile="ooolocales.properties" />
        <copy filtering="true" encoding="${encoding}" todir="${dist.dir}/">
            <fileset dir="openoffice/" includes="description.xml,*.xcu,Options.xdl,META-INF/**" />
        </copy>
        <copy todir="${dist.dir}/">
            <fileset dir="openoffice/" includes="images/**,help/**" />
        </copy>
    </target>


    <!-- ================================================================== -->
    <!-- LanguageTool Java Web Start compile -->
    <!-- ================================================================== -->
    <target name="jnlp" depends="common" description="Builds JNLP distribution file">
        <mkdir dir="${dist.dir}/web" />

        <filter filtersFile="build.properties" />
        <copy file="jnlp/LanguageTool.jnlp" todir="${dist.dir}/web" filtering="true" />
        <copy file="jnlp/LanguageToolServer.jnlp" todir="${dist.dir}/web" filtering="true" />
        <copy file="jnlp/LanguageToolBig.gif" todir="${dist.dir}/web" />

        <copy todir="${dist.dir}/web/">
            <fileset dir="${dist.dir}" casesensitive="yes">
                <include name="**/*.jar" />
                <exclude name="**/LanguageTool.uno.jar"/>
                <exclude name="**/junit.jar"/>
                <exclude name="**/Rule*.jar"/>
                <exclude name="**/${bliki.lib}"/>
            </fileset>
        </copy>

        <jar compress="yes" basedir="${dist.dir}" destfile="${dist.dir}/web/resource.jar" includes="org/languagetool/resource/**" />
        <jar compress="yes" basedir="${dist.dir}" destfile="${dist.dir}/web/rules.jar" includes="org/languagetool/rules/**" />

        <!--
              Split the monolithic jna file into a shared one with java code and
              platform specifc ones for each supported platform, this is needed for
              webstart that handles native libs.
        -->
        <zip destfile="${dist.dir}/web/jna.jar">
            <zipfileset src="${ext.jna.lib}">
                <exclude name="**/*.dll" />
                <exclude name="**/*.so" />
                <exclude name="**/*.jnilib" />
                <exclude name="**/*.dylib" />
            </zipfileset>
        </zip>

        <zip destfile="${dist.dir}/web/jna-linux-i386.jar">
            <zipfileset src="${ext.jna.lib}" includes="com/sun/jna/linux-i386/libjnidispatch.so" fullpath="libjnidispatch.so"/>
        </zip>

        <zip destfile="${dist.dir}/web/jna-linux-amd64.jar">
            <zipfileset src="${ext.jna.lib}" includes="com/sun/jna/linux-amd64/libjnidispatch.so" fullpath="libjnidispatch.so"/>
        </zip>

        <zip destfile="${dist.dir}/web/jna-darwin.jar">
            <zipfileset src="${ext.jna.lib}" includes="com/sun/jna/darwin/libjnidispatch.jnilib" fullpath="libjnidispatch.jnilib"/>
        </zip>

        <zip destfile="${dist.dir}/web/jna-win32-x86.jar">
            <zipfileset src="${ext.jna.lib}" includes="com/sun/jna/win32-x86/jnidispatch.dll" fullpath="jnidispatch.dll"/>
        </zip>

        <zip destfile="${dist.dir}/web/jna-win32-amd64.jar">
            <zipfileset src="${ext.jna.lib}" includes="com/sun/jna/win32-amd64/jnidispatch.dll" fullpath="jnidispatch.dll"/>
        </zip>

        <!--
                   Create separate jar files with the hunspell natives as well.
                -->
        <!-- jar destfile="${dist.dir}/web/hunspell-jws.jar">
                <fileset dir="build/classes"/>
              </jar -->

        <zip destfile="${dist.dir}/web/hunspell-win32-x86.jar">
            <fileset dir="${ext.dir}/native-lib">
                <filename name="hunspell-win-x86-32.dll"/>
            </fileset>
        </zip>

        <zip destfile="${dist.dir}/web/hunspell-win32-amd64.jar">
            <fileset dir="${ext.dir}/native-lib">
                <filename name="hunspell-win-x86-64.dll"/>
            </fileset>
        </zip>

        <zip destfile="${dist.dir}/web/hunspell-linux-i386.jar">
            <fileset dir="${ext.dir}/native-lib">
                <filename name="libhunspell-linux-x86-32.so"/>
            </fileset>
        </zip>

        <zip destfile="${dist.dir}/web/hunspell-linux-amd64.jar">
            <fileset dir="${ext.dir}/native-lib">
                <filename name="libhunspell-linux-x86-64.so"/>
            </fileset>
        </zip>

        <zip destfile="${dist.dir}/web/hunspell-darwin-i386.jar">
            <fileset dir="${ext.dir}/native-lib">
                <filename name="hunspell-darwin-x86-32.*"/>
            </fileset>
        </zip>

        <zip destfile="${dist.dir}/web/hunspell-darwin-amd64.jar">
            <fileset dir="${ext.dir}/native-lib">
                <filename name="hunspell-darwin-x86-64.*"/>
            </fileset>
        </zip>

        <zip destfile="${dist.dir}/web/hunspell-darwin-ppc.jar">
            <fileset dir="${ext.dir}/native-lib">
                <filename name="hunspell-darwin-ppc-32.*"/>
            </fileset>
        </zip>

        <signjar keypass="blabla" keystore="./myalias.p12"
                 storetype="pkcs12" storepass="blabla" alias="270e0367-a1de-11e1-b19d-8c89a57cdeaa">
            <path>
                <fileset dir="${dist.dir}/web" includes="**/*.jar" />
            </path>
        </signjar>

    </target>

    <!-- ================================================================== -->
    <!-- WordTokenizer - just a helper app -->
    <!-- ================================================================== -->

    <target name="wtokenizer" depends="common" description="Builds a word tokenizer">

        <jar jarfile="${dist.dir}/wordtokenizer.jar" basedir="${build.classes}" includes="org/languagetool/dev/**">
            <manifest>
                <attribute name="Main-Class" value="org.languagetool.dev.WordTokenizer" />
                <attribute name="Class-Path" value="./ ./LanguageTool.jar ./${segment.lib} ./${logging.lib}" />
            </manifest>
        </jar>

    </target>

</project>
