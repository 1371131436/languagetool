<?xml version="1.0" encoding="utf-8"?>
<!--
A demo rule file for LanguageTool
Copyright (C) 2005 Daniel Naber (http://www.danielnaber.de)
$Id: grammar.xml,v 1.20 2007-02-26 01:24:41 milek_pl Exp $
-->

<rules lang="xx">

<!-- devising phrase syntax, not for production yet -->
<phrases>
	<phrase id="NP">
		<token>trivial</token>
		<token>phrase</token>
		<token>demo</token>
		<token><exception>exception</exception></token>
		</phrase>	
		<phrase id="COMPLEX_PHRASE">
		<token>complex</token>
		<includephrases>
			<phraseref idref="NP"/>
		</includephrases>
		<token>another</token>
	</phrase>
	<phrase id="DUMMY_VB1">
		<token regexp="yes">go|goa</token>
	</phrase>
	<phrase id="DUMMY_VB2">
		<token>goes</token>
	</phrase>
	<phrase id="DUMMY_VB3">
		<token>went</token>
	</phrase>
	<phrase id="COMPLEX_MULTIPLE">
		<token>first</token>
		<includephrases>
			<phraseref idref="DUMMY_VB1"/>
			<phraseref idref="DUMMY_VB2"/>
			<phraseref idref="DUMMY_VB3"/>
		</includephrases>
		<token>last</token>
	</phrase>
	<phrase id="SINGLE_TOKEN">
		<token>single</token>
	</phrase>
	<phrase id="TEST_INCLUDE">
		<includephrases>
			<phraseref idref="COMPLEX_MULTIPLE"/>			
			<phraseref idref="SINGLE_TOKEN"/>
		</includephrases>
	</phrase>
	<phrase id="trivial_include">
		<includephrases>
			<phraseref idref="DUMMY_VB1"/>
		</includephrases>
		<includephrases>
			<phraseref idref="DUMMY_VB2"/>
		</includephrases>
	</phrase>
</phrases>



  <category name="misc">

    <!-- a trivialdemo rule that matches "foo" followed by "bar" -->
    <rule id="DEMO_RULE" name="Find 'foo bar'">
      <pattern mark_from="0" case_sensitive="no">
        <token>foo</token>
        <token>bar</token>
      </pattern>
      <message>Did you mean <suggestion>fuu bah</suggestion>?</message>
      <example type="correct">This is <marker>fuu bah</marker>.</example>
      <example type="incorrect">This is <marker>foo bar</marker>.</example>
    </rule>

    <rule id="API_OUTPUT_TEST_RULE" name="Find 'foo bar'">
      <pattern mark_from="1" case_sensitive="no">
        <token>ach</token>
        <token>thosnaíos-sa</token>
      </pattern>
      <message>Did you mean <suggestion>fuu bah</suggestion>?</message>
      <example type="correct">This is ach <marker>fuu bah</marker>.</example>
      <example type="incorrect">This is ach <marker>thosnaíos-sa</marker>.</example>
    </rule>

    <rule id="NEGATION_TOKEN" name="test negation">
      <pattern mark_from="1">
        <token>small</token>
        <token negate="yes">test</token>
      </pattern>
      <message>test</message>
      <example type="correct">a small <marker>test</marker></example>
      <example type="incorrect">a small <marker>toast</marker></example>
    </rule>
  
  	<rule id="TEST_GO" name="another test of phrases">
		<pattern>
			<token>foo</token>
			<phraseref idref="DUMMY_VB1"/>
		</pattern>
		<message>Error!</message>
		<example type="correct">foo bar</example>
		<example type="incorrect"><marker>foo go</marker></example>
		<example type="incorrect"><marker>foo go</marker> bar</example>
		<example type="incorrect"><marker>foo goa</marker> bar</example>
		</rule>
    
    <rule id="TEST_PHRASES1" name="test phrases mechanism">
    <pattern>
    	<phraseref idref="COMPLEX_MULTIPLE"/>
    	<token>there</token>
    </pattern>
    <message>This is the matched text: \1 \2</message>
    <example type="correct">go here</example>
    <example type="incorrect"><marker>first go last there</marker>, please!</example>
    </rule>
	
	<!--  these rules fail! 
		<rule id="test_include" name="test two includeblocks">
		<pattern>
			<phraseref idref="TEST_INCLUDE"/>			
		</pattern>
		<message>Matched: \1 \2.</message>
		<example type="correct">Any string.</example>
		<example type="incorrect">Some words, <marker>first went last single</marker></example>
		</rule>  

			
		<rule id="test_two_phrases" name="test two phrases">
		<pattern>
			<phraseref idref="COMPLEX_MULTIPLE"/>
			<phraseref idref="SINGLE_TOKEN"/>
		</pattern>
		<message>Matched: \1 \2.</message>
		<example type="correct">Any string.</example>
		<example type="incorrect">First words and <marker>first went last single</marker></example>
		</rule>  
		 -->
		
  </category>

</rules>
